#!/usr/bin/env python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-

import sys
import os
from os.path import join, expanduser

from speech import __version__
from speech.debug import is_debug_mode
from speech.conf import Conf, LISTLANG
from speech.dic import replace

conf = Conf()

def printHelp():
    print('%s version %s' % (conf.app_name, __version__))
    print('')
    print('Usage : %s-cli "[text to read]" [.wav filename]...[optional lang]' %\
            conf.app_name)
    print('')
    print('Common flags:')
    print(' -h   --help                   show usage information')
    print('      --version                show version information')

if __name__ == "__main__":
    if len(sys.argv) <= 1:
        printHelp()
        exit(0)
    text = sys.argv[1]
    if text in ['--version']:
        print('%s version %s' % (conf.app_name, __version__))
        exit(0)
    if text in ['--help', '-h']:
        printHelp()
        exit(0)
    if len(sys.argv) == 2:
        print("a secong argument is missing : .wav filename")
        exit(0)
    path = sys.argv[2]
    if len(sys.argv) > 3 and sys.argv[3] in LISTLANG:
        conf.lang = sys.argv[3]

    text = text.replace('\"', '')
    text = text.replace('`', '')
    text = text.replace('Â´', '')
    text = text.replace('-','')

    text = replace(conf.dict_path, text)
    if len(text) <= 32768:
        cmd = 'pico2wave -l %s -w %s \"%s\" ' % ( conf.lang, path, text )
        if is_debug_mode():
            print(cmd)
        os.system(cmd)

    elif os.path.isfile('/usr/bin/sox'):
        discours = text.split('\n\n')
        cmds = []
        names = []
        text = ''
        for idx,paragraph in enumerate(discours):
            text += paragraph
            if idx == len(discours)-1 or len(text) + len(discours[idx+1]) >= 32767:
                filename = conf.cache + 'speech' + str(idx) + '.wav'
                cmds.append('pico2wave -l %s -w %s \"%s\" ' % ( conf.lang, filename, text ))
                names.append(filename)
                text = ''

        nproc = int(.5 * multiprocessing.cpu_count())
        if nproc == 0:
            nproc = 1
        multiprocessing.Pool(nproc).map(os.system, cmds)
        os.system('sox %s %s' % ( ' '.join(names), path ))
        for fichier in names:
            os.remove(fichier)
