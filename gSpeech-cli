#!/usr/bin/env python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-

import sys
import os,getopt,multiprocessing

from speech import __version__
from speech.conf import Conf, LISTLANG
from speech.textutils import adaptTextToDict
from speech.audioutils import getAudioCommands

conf = Conf()

def printHelp():
    print('%s version %s' % (conf.app_name, __version__))
    print('')
    print('Usage : %s-cli -i " [text to read]" ( or -f [txt file] ) -o [.wav filename] ... -l [optional lang]' %\
            conf.app_name)
    print('')
    print('Common flags:')
    print(' -h   --help                   show usage information')
    print('      --version                show version information')
    print(' -i   --input-text             text to read')
    print(' -f   --input-file             file to read (supported only plain txt')
    print(' -o   --output-file            name of the audio output file (wav type)')
    print(' -l   --lang                   language')
    print('possible languages:')
    for l in LISTLANG:
        print( l )

#read text file
def text_file(filename):
    try:
        f = open(filename, 'r')
    except IOError:
        return "Error: file not found"
    return f.read()

if __name__ == "__main__":

    try:
        opts, args = getopt.getopt(sys.argv[1:], "hvi:f:l:o:", ["help", "version",\
                "input-text=","input-file", "lang=", "output-file="])
    except getopt.GetoptError:
        printHelp()
        sys.exit(2)

    input_file = ""
    text = ""
    lang = ""
    outfile = "speech.wav"

    if len(opts) == 0:
        printHelp()
        sys.exit()

    for opt, arg in opts:
        if opt in ('-h', '--help'):
            printHelp()
            sys.exit()
        elif opt in ('-v', '--version'):
            print('%s version %s' % (conf.app_name, __version__))
            sys.exit()
        elif opt in ('-l', '--lang'):
            lang = arg
        elif opt in ('-o', '--output-file'):
            outfile = arg
        elif opt in ('-f', '--input-file'):
            input_file = arg
        elif opt in ('-i', '--input-text'):
            text = arg

    if lang in LISTLANG:
        conf.setLang(lang)

    if input_file:
        text = text_file( input_file )

    text = adaptTextToDict(conf.dict_path, text)
    names, cmds = getAudioCommands(text,outfile)
    
    if len(cmds) == 1 :
        os.system(cmds[0])
    elif os.path.isfile('/usr/bin/sox'):
        nproc = int(.5 * multiprocessing.cpu_count())
        if nproc == 0:
            nproc = 1
        multiprocessing.Pool(nproc).map(os.system, cmds)
        os.system('sox %s %s' % ( ' '.join(names), outfile ))
        for fichier in names:
            os.remove(fichier)
