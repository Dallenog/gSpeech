#!/usr/bin/env python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-

import sys
import os
from os.path import join, expanduser
from datetime import datetime, timedelta
from subprocess import Popen, PIPE

from speech import __version__
from speech.debug import is_debug_mode
from speech.conf import Conf, LISTLANG
from speech.dic import replace

def cut_end(text, path):
    if not text.endswith('  et une'):
        return
    ffprobe = Popen(
        "ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 -sexagesimal %s" % path,
        shell = True,
        stdout = PIPE
    )
    length = ffprobe.stdout.readlines()[0].decode("utf-8").strip()
    print('    lenght: ', length)
    date_time_length = datetime.strptime(length, '%H:%M:%S.%f')
    minus_length = 1000000
    new_date_time = date_time_length - timedelta(microseconds=minus_length)
    new_length = new_date_time.isoformat()[12:]
    print('new length: ', new_length)
    cmd = "ffmpeg -y -i test.wav -to %s %s" % (new_length, path)
    print(cmd)
    ffmpeg = Popen(
        cmd,
        shell = True,
        stdout = PIPE
    )
    ffmpeg.stdout.readlines()


if __name__ == "__main__":
    if len(sys.argv) <= 1:
        print("first argument is mising for the text to read")
        exit(0)
    text = sys.argv[1]
    conf = Conf()
    if text in ['--version']:
        print('%s version %s' % (conf.app_name, __version__))
        exit(0)
    if text in ['--help', '-h']:
        print('%s version %s' % (conf.app_name, __version__))
        print('')
        print('Usage : %s-cli "[text to read]" [.wav path]...[optionnal lang]')
        print('')
        print('Common flags:')
        print(' -h   --help                   show usage information')
        print('      --version                show version information')
        exit(0)
    if len(sys.argv) == 2:
        print("a secong argument is missing : .wav path")
        exit(0)
    path = sys.argv[2]
    if len(sys.argv) > 3 and sys.argv[3] in LISTLANG:
        conf.lang = sys.argv[3]

    text = text.replace('\"', '')
    text = text.replace('`', '')
    text = text.replace('Â´', '')
    text = text.replace('-','')

    text = replace(conf.dict_path, text)
    if text.strip().endswith('que'):
        text += '  et une'
    if len(text) <= 32768:
        cmd = 'pico2wave -l %s -w %s \"%s\" ' % (conf.lang, path, text)
        if is_debug_mode():
            print(cmd)
        os.system(cmd)
        cut_end(text, path)
        exit(0)
    if not os.path.isfile('/usr/bin/sox'):
        exit(0)
    discours = text.split('\n\n')
    cmds = []
    names = []
    text = ''
    for idx,paragraph in enumerate(discours):
        text += paragraph
        if idx == len(discours)-1 or len(text) + len(discours[idx + 1]) >= 32767:
            filename = conf.cache + 'speech' + str(idx) + '.wav'
            cmds.append('pico2wave -l %s -w %s \"%s\" ' % (conf.lang, filename, text))
            names.append(filename)
            text = ''

    nproc = int(.5 * multiprocessing.cpu_count())
    if nproc == 0:
        nproc = 1
    multiprocessing.Pool(nproc).map(os.system, cmds)
    os.system('sox %s %s' % (' '.join(names), path))
    for fichier in names:
        os.remove(fichier)
